//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibSettings.Examples.SettingsEditor.WinForms {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SyntaxHighlightResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SyntaxHighlightResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LibSettings.Examples.SettingsEditor.WinForms.SyntaxHighlightResources", typeof(SyntaxHighlightResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=11&quot;&gt;
        ///&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;{0}&lt;/script&gt;
        ///&lt;style&gt;
        ///{1}
        ///.hljs-attr {{ color: #d84600; }}
        ///body, html, pre {{ margin: 0; min-height: 100vh }}
        ///code {{
        ///        margin: 0;
        ///        min-height: 100vh;
        ///        font-family: &quot;Fira Mono&quot;, &quot;Fira Code&quot;, Courier New, Courier, monospace;
        ///        font-size: 10px;
        ///        box-sizing: border-box;
        ///    }}
        ///&lt;/style&gt;
        ///&lt;pre&gt;&lt;code&gt;{3}&lt;/code&gt;&lt;/pre&gt;
        ///&lt;script&gt;hljs.initHighlightingOn [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Html {
            get {
                return ResourceManager.GetString("Html", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! highlight.js v9.18.1 | BSD3 License | git.io/hljslicense */
        ///!function(e){var n=&quot;object&quot;==typeof window&amp;&amp;window||&quot;object&quot;==typeof self&amp;&amp;self;&quot;undefined&quot;==typeof exports||exports.nodeType?n&amp;&amp;(n.hljs=e({}),&quot;function&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define([],function(){return n.hljs})):e(exports)}(function(a){var f=[],i=Object.keys,_={},c={},C=!0,n=/^(no-?highlight|plain|text)$/i,l=/\blang(?:uage)?-([\w-]+)\b/i,t=/((^(&lt;[^&gt;]+&gt;|\t|)+|(?:\n)))/gm,r={case_insensitive:&quot;cI&quot;,lexemes:&quot;l&quot;,contains:&quot;c&quot;,keywords:&quot;k&quot;,subL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Script {
            get {
                return ResourceManager.GetString("Script", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///
        ///Colorbrewer theme
        ///Original: https://github.com/mbostock/colorbrewer-theme (c) Mike Bostock &lt;mike@ocks.org&gt;
        ///Ported by Fabrício Tavares de Oliveira
        ///
        ///*/
        ///
        ///.hljs {
        ///  display: block;
        ///  overflow-x: auto;
        ///  padding: 0.5em;
        ///  background: #fff;
        ///}
        ///
        ///.hljs,
        ///.hljs-subst {
        ///  color: #000;
        ///}
        ///
        ///.hljs-string,
        ///.hljs-meta,
        ///.hljs-symbol,
        ///.hljs-template-tag,
        ///.hljs-template-variable,
        ///.hljs-addition {
        ///  color: #756bb1;
        ///}
        ///
        ///.hljs-comment,
        ///.hljs-quote {
        ///  color: #636363;
        ///}
        ///
        ///.hljs-number,
        ///.hljs-regexp,
        ///.hljs-literal,
        ///.hljs-bullet,
        ///. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Style_ColorBrewer {
            get {
                return ResourceManager.GetString("Style_ColorBrewer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///
        ///Monokai Sublime style. Derived from Monokai by noformnocontent http://nn.mit-license.org/
        ///
        ///*/
        ///
        ///.hljs {
        ///  display: block;
        ///  overflow-x: auto;
        ///  padding: 0.5em;
        ///  background: #23241f;
        ///}
        ///
        ///.hljs,
        ///.hljs-tag,
        ///.hljs-subst {
        ///  color: #f8f8f2;
        ///}
        ///
        ///.hljs-strong,
        ///.hljs-emphasis {
        ///  color: #a8a8a2;
        ///}
        ///
        ///.hljs-bullet,
        ///.hljs-quote,
        ///.hljs-number,
        ///.hljs-regexp,
        ///.hljs-literal,
        ///.hljs-link {
        ///  color: #ae81ff;
        ///}
        ///
        ///.hljs-code,
        ///.hljs-title,
        ///.hljs-section,
        ///.hljs-selector-class {
        ///  color: #a6e22e;
        ///}
        ///
        ///.hljs-strong {
        ///  font-weight:  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Style_MonokaiSublime {
            get {
                return ResourceManager.GetString("Style_MonokaiSublime", resourceCulture);
            }
        }
    }
}
